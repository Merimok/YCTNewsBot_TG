from flask import Flask, request, jsonify
import feedparser
import requests
from openai import OpenAI
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = "7977806496:AAHdtcgzJ5mx3sVSaGNSKL-EU9rzjEmmsrI"
TELEGRAM_API_URL = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/"
RSS_FEED_URL = "https://www.tomshardware.com/feeds/all"
OPENROUTER_API_KEY = "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"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenRouter
openrouter_client = OpenAI(
    base_url="https://openrouter.ai/api/v1",
    api_key=OPENROUTER_API_KEY,
    default_headers={
        "HTTP-Referer": "https://github.com",  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        "X-Title": "TelegramNewsBot"           # –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    }
)

def send_telegram_message(chat_id: int, text: str) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram —á–∞—Ç."""
    try:
        payload = {
            "chat_id": chat_id,
            "text": text,
            "parse_mode": "HTML",
            "disable_web_page_preview": True
        }
        response = requests.post(
            f"{TELEGRAM_API_URL}sendMessage",
            json=payload,
            timeout=10
        )
        response.raise_for_status()
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {str(e)}")
        return False

def generate_article_summary(url: str) -> dict:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ —á–µ—Ä–µ–∑ OpenRouter."""
    try:
        response = openrouter_client.chat.completions.create(
            model="deepseek/deepseek-v3-base:free",
            messages=[
                {
                    "role": "system",
                    "content": "–¢—ã –ø–æ–º–æ–≥–∞–µ—à—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫—Ä–∞—Ç–∫–∏–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π."
                },
                {
                    "role": "user",
                    "content": f"–°–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤) –∏ –ø–µ—Ä–µ—Å–∫–∞–∑ (–¥–æ 500 —Å–ª–æ–≤) —Å—Ç–∞—Ç—å–∏ –ø–æ —Å—Å—ã–ª–∫–µ: {url}"
                }
            ],
            max_tokens=2000,
            temperature=0.7
        )
        
        content = response.choices[0].message.content
        parts = content.split("\n", 1)
        
        return {
            "title": parts[0].strip()[:100],
            "summary": parts[1].strip()[:3900] if len(parts) > 1 else "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ—Å–∫–∞–∑"
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ OpenRouter: {str(e)}")
        return {"error": str(e)}

def fetch_latest_news() -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–æ–≤–æ—Å—Ç—å –∏–∑ RSS-–ª–µ–Ω—Ç—ã."""
    try:
        feed = feedparser.parse(RSS_FEED_URL)
        if not feed.entries:
            raise ValueError("–ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –≤ RSS-–ª–µ–Ω—Ç–µ")
        return {
            "title": feed.entries[0].title,
            "link": feed.entries[0].link,
            "published": feed.entries[0].published
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ RSS: {str(e)}")
        return {"error": str(e)}

@app.route('/webhook', methods=['POST'])
def handle_webhook():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ webhook-–∑–∞–ø—Ä–æ—Å—ã –æ—Ç Telegram."""
    try:
        update = request.get_json()
        chat_id = update['message']['chat']['id']
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç—å
        news = fetch_latest_news()
        if "error" in news:
            send_telegram_message(chat_id, f"–û—à–∏–±–∫–∞: {news['error']}")
            return jsonify({"status": "error"}), 200
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
        summary = generate_article_summary(news["link"])
        if "error" in summary:
            send_telegram_message(chat_id, f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {summary['error']}")
            return jsonify({"status": "error"}), 200
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = (
            f"<b>üì∞ {summary['title']}</b>\n\n"
            f"{summary['summary']}\n\n"
            f"<a href='{news['link']}'>–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é</a>"
        )
        send_telegram_message(chat_id, message)
        
        return jsonify({"status": "success"}), 200
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {str(e)}")
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route('/healthcheck', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞."""
    return jsonify({"status": "ok"}), 200

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)